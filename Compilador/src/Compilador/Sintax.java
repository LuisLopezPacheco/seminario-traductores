
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 04 20:01:39 CST 2021
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 04 20:01:39 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\043\000\002\002" +
    "\012\000\002\003\007\000\002\016\007\000\002\016\013" +
    "\000\002\017\006\000\002\017\013\000\002\017\030\000" +
    "\002\017\010\000\002\020\003\000\002\020\006\000\002" +
    "\020\006\000\002\015\006\000\002\004\007\000\002\004" +
    "\005\000\002\004\006\000\002\004\007\000\002\004\010" +
    "\000\002\004\011\000\002\014\007\000\002\014\006\000" +
    "\002\021\004\000\002\023\012\000\002\022\012\000\002" +
    "\024\007\000\002\026\017\000\002\026\015\000\002\025" +
    "\003\000\002\005\007\000\002\005\005\000\002\005\006" +
    "\000\002\005\007\000\002\011\013\000\002\011\013\000" +
    "\002\011\013\000\002\011\013\000\002\011\013\000\002" +
    "\011\012\000\002\011\011\000\002\011\012\000\002\011" +
    "\013\000\002\011\013\000\002\011\013\000\002\011\013" +
    "\000\002\011\013\000\002\011\013\000\002\011\012\000" +
    "\002\011\013\000\002\011\013\000\002\006\010\000\002" +
    "\006\011\000\002\006\013\000\002\006\012\000\002\006" +
    "\012\000\002\006\015\000\002\006\017\000\002\006\013" +
    "\000\002\006\010\000\002\006\006\000\002\007\006\000" +
    "\002\010\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\005\000\002\010\006\000\002\010\007\000\002\010" +
    "\010\000\002\010\011\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\006\030\004\040\007\001\002\000\004\014" +
    "\u0123\001\002\000\004\030\231\001\002\000\004\005\017" +
    "\001\002\000\004\023\012\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\004\023\013\001\002" +
    "\000\004\023\014\001\002\000\004\022\015\001\002\000" +
    "\004\005\ufffe\001\002\000\004\005\036\001\002\000\004" +
    "\023\020\001\002\000\010\007\023\022\021\023\022\001" +
    "\002\000\004\005\ufff2\001\002\000\006\022\026\023\027" +
    "\001\002\000\004\024\024\001\002\000\004\022\025\001" +
    "\002\000\004\005\ufff3\001\002\000\004\005\ufff1\001\002" +
    "\000\006\022\030\023\031\001\002\000\004\005\ufff0\001" +
    "\002\000\006\022\032\023\033\001\002\000\004\005\uffef" +
    "\001\002\000\004\022\034\001\002\000\004\005\uffee\001" +
    "\002\000\006\023\054\043\051\001\002\000\004\023\037" +
    "\001\002\000\004\014\040\001\002\000\006\005\041\015" +
    "\042\001\002\000\004\023\044\001\002\000\004\016\043" +
    "\001\002\000\006\023\ufffd\043\ufffd\001\002\000\004\005" +
    "\045\001\002\000\004\023\046\001\002\000\004\015\047" +
    "\001\002\000\004\016\050\001\002\000\006\023\ufffc\043" +
    "\ufffc\001\002\000\004\014\323\001\002\000\006\017\167" +
    "\023\170\001\002\000\004\043\051\001\002\000\004\011" +
    "\154\001\002\000\004\043\051\001\002\000\004\043\051" +
    "\001\002\000\006\026\061\043\051\001\002\000\006\017" +
    "\ufffb\023\ufffb\001\002\000\004\037\106\001\002\000\004" +
    "\043\051\001\002\000\006\026\061\043\051\001\002\000" +
    "\006\017\ufff8\023\ufff8\001\002\000\004\043\051\001\002" +
    "\000\004\043\051\001\002\000\004\043\051\001\002\000" +
    "\004\043\051\001\002\000\004\043\051\001\002\000\004" +
    "\043\051\001\002\000\004\043\051\001\002\000\004\043" +
    "\051\001\002\000\004\043\051\001\002\000\004\043\051" +
    "\001\002\000\004\043\051\001\002\000\004\043\051\001" +
    "\002\000\004\043\051\001\002\000\004\043\051\001\002" +
    "\000\004\043\051\001\002\000\004\026\061\001\002\000" +
    "\006\017\ufff9\023\ufff9\001\002\000\006\023\110\041\107" +
    "\001\002\000\006\023\116\024\115\001\002\000\006\022" +
    "\112\037\111\001\002\000\004\004\113\001\002\000\012" +
    "\017\uffc6\023\uffc6\026\uffc6\027\uffc6\001\002\000\004\022" +
    "\114\001\002\000\012\017\uffc7\023\uffc7\026\uffc7\027\uffc7" +
    "\001\002\000\004\023\153\001\002\000\010\023\145\041" +
    "\uffc4\042\uffc4\001\002\000\006\041\120\042\121\001\002" +
    "\000\006\022\140\037\137\001\002\000\004\041\122\001" +
    "\002\000\006\022\124\037\123\001\002\000\006\004\125" +
    "\023\126\001\002\000\012\017\uffce\023\uffce\026\uffce\027" +
    "\uffce\001\002\000\004\022\136\001\002\000\006\022\130" +
    "\037\127\001\002\000\004\004\131\001\002\000\012\017" +
    "\uffc8\023\uffc8\026\uffc8\027\uffc8\001\002\000\006\022\133" +
    "\037\132\001\002\000\004\004\134\001\002\000\012\017" +
    "\uffca\023\uffca\026\uffca\027\uffca\001\002\000\004\022\135" +
    "\001\002\000\012\017\uffc9\023\uffc9\026\uffc9\027\uffc9\001" +
    "\002\000\012\017\uffcd\023\uffcd\026\uffcd\027\uffcd\001\002" +
    "\000\006\004\141\023\142\001\002\000\012\017\uffcf\023" +
    "\uffcf\026\uffcf\027\uffcf\001\002\000\004\022\144\001\002" +
    "\000\004\022\143\001\002\000\012\017\uffcb\023\uffcb\026" +
    "\uffcb\027\uffcb\001\002\000\012\017\uffcc\023\uffcc\026\uffcc" +
    "\027\uffcc\001\002\000\010\023\146\041\uffc2\042\uffc2\001" +
    "\002\000\010\023\147\041\uffc1\042\uffc1\001\002\000\010" +
    "\023\150\041\uffc0\042\uffc0\001\002\000\010\023\151\041" +
    "\uffbf\042\uffbf\001\002\000\010\023\152\041\uffbe\042\uffbe" +
    "\001\002\000\006\041\uffbd\042\uffbd\001\002\000\006\041" +
    "\uffc3\042\uffc3\001\002\000\004\011\155\001\002\000\004" +
    "\022\156\001\002\000\004\043\ufff4\001\002\000\004\043" +
    "\051\001\002\000\004\043\051\001\002\000\004\043\051" +
    "\001\002\000\004\043\051\001\002\000\004\043\051\001" +
    "\002\000\004\043\051\001\002\000\004\026\061\001\002" +
    "\000\006\017\ufffa\023\ufffa\001\002\000\006\005\ufff7\020" +
    "\ufff7\001\002\000\006\023\316\024\315\001\002\000\004" +
    "\005\036\001\002\000\006\023\054\043\051\001\002\000" +
    "\006\017\167\023\170\001\002\000\004\005\036\001\002" +
    "\000\006\023\054\043\051\001\002\000\006\017\167\023" +
    "\170\001\002\000\004\005\036\001\002\000\006\023\054" +
    "\043\051\001\002\000\006\017\167\023\170\001\002\000" +
    "\004\005\036\001\002\000\006\023\054\043\051\001\002" +
    "\000\006\017\167\023\170\001\002\000\004\005\036\001" +
    "\002\000\006\023\054\043\051\001\002\000\006\017\167" +
    "\023\170\001\002\000\006\005\212\020\213\001\002\000" +
    "\004\031\224\001\002\000\004\020\217\001\002\000\004" +
    "\014\214\001\002\000\004\015\215\001\002\000\004\016" +
    "\216\001\002\000\004\031\uffec\001\002\000\004\014\220" +
    "\001\002\000\004\015\221\001\002\000\004\016\222\001" +
    "\002\000\004\031\uffed\001\002\000\004\026\061\001\002" +
    "\000\004\016\225\001\002\000\004\026\uffeb\001\002\000" +
    "\004\026\061\001\002\000\004\030\004\001\002\000\004" +
    "\030\231\001\002\000\004\024\260\001\002\000\004\030" +
    "\231\001\002\000\004\030\231\001\002\000\004\030\231" +
    "\001\002\000\004\030\231\001\002\000\004\030\231\001" +
    "\002\000\004\017\240\001\002\000\006\002\uffe5\017\uffe5" +
    "\001\002\000\004\017\242\001\002\000\004\031\251\001" +
    "\002\000\004\023\244\001\002\000\004\024\246\001\002" +
    "\000\004\002\000\001\002\000\004\022\247\001\002\000" +
    "\004\017\250\001\002\000\004\002\uffbc\001\002\000\004" +
    "\014\252\001\002\000\004\023\253\001\002\000\004\050" +
    "\254\001\002\000\004\024\255\001\002\000\004\015\256" +
    "\001\002\000\004\022\257\001\002\000\004\023\uffe9\001" +
    "\002\000\004\042\261\001\002\000\004\026\061\001\002" +
    "\000\004\027\263\001\002\000\004\036\303\001\002\000" +
    "\006\023\266\026\061\001\002\000\004\027\263\001\002" +
    "\000\004\014\267\001\002\000\004\015\270\001\002\000" +
    "\004\022\271\001\002\000\004\023\272\001\002\000\004" +
    "\022\273\001\002\000\006\017\uffe6\030\uffe6\001\002\000" +
    "\004\023\275\001\002\000\004\014\276\001\002\000\004" +
    "\015\277\001\002\000\004\022\300\001\002\000\004\023" +
    "\301\001\002\000\004\022\302\001\002\000\006\017\uffe7" +
    "\030\uffe7\001\002\000\004\023\304\001\002\000\004\022" +
    "\305\001\002\000\010\023\uffc5\026\uffc5\030\uffc5\001\002" +
    "\000\004\026\061\001\002\000\004\026\061\001\002\000" +
    "\004\026\061\001\002\000\004\026\061\001\002\000\004" +
    "\026\061\001\002\000\004\027\263\001\002\000\004\030" +
    "\uffea\001\002\000\004\022\321\001\002\000\004\022\317" +
    "\001\002\000\004\017\320\001\002\000\006\005\ufff5\020" +
    "\ufff5\001\002\000\004\017\322\001\002\000\006\005\ufff6" +
    "\020\ufff6\001\002\000\004\041\324\001\002\000\004\023" +
    "\325\001\002\000\020\023\333\041\326\042\330\044\332" +
    "\045\327\046\334\047\331\001\002\000\004\015\u011a\001" +
    "\002\000\012\023\u010e\041\u010b\044\u010d\045\u010c\001\002" +
    "\000\004\041\u0108\001\002\000\006\023\u0100\044\u0101\001" +
    "\002\000\010\023\366\044\365\045\364\001\002\000\014" +
    "\041\342\044\344\045\341\046\345\047\343\001\002\000" +
    "\004\044\335\001\002\000\004\041\336\001\002\000\004" +
    "\015\337\001\002\000\004\022\340\001\002\000\006\026" +
    "\uffd3\043\uffd3\001\002\000\004\041\361\001\002\000\004" +
    "\015\357\001\002\000\004\041\354\001\002\000\004\041" +
    "\351\001\002\000\004\041\346\001\002\000\004\015\347" +
    "\001\002\000\004\022\350\001\002\000\006\026\uffdf\043" +
    "\uffdf\001\002\000\004\015\352\001\002\000\004\022\353" +
    "\001\002\000\006\026\uffe0\043\uffe0\001\002\000\004\015" +
    "\355\001\002\000\004\022\356\001\002\000\006\026\uffdc" +
    "\043\uffdc\001\002\000\004\022\360\001\002\000\006\026" +
    "\uffd2\043\uffd2\001\002\000\004\015\362\001\002\000\004" +
    "\022\363\001\002\000\006\026\uffdd\043\uffdd\001\002\000" +
    "\004\041\375\001\002\000\004\041\372\001\002\000\004" +
    "\041\367\001\002\000\004\015\370\001\002\000\004\022" +
    "\371\001\002\000\006\026\uffde\043\uffde\001\002\000\004" +
    "\015\373\001\002\000\004\022\374\001\002\000\006\026" +
    "\uffd6\043\uffd6\001\002\000\004\015\376\001\002\000\004" +
    "\022\377\001\002\000\006\026\uffd5\043\uffd5\001\002\000" +
    "\004\041\u0105\001\002\000\004\041\u0102\001\002\000\004" +
    "\015\u0103\001\002\000\004\022\u0104\001\002\000\006\026" +
    "\uffd8\043\uffd8\001\002\000\004\015\u0106\001\002\000\004" +
    "\022\u0107\001\002\000\006\026\uffd0\043\uffd0\001\002\000" +
    "\004\015\u0109\001\002\000\004\022\u010a\001\002\000\006" +
    "\026\uffd9\043\uffd9\001\002\000\004\015\u0118\001\002\000" +
    "\004\041\u0115\001\002\000\004\041\u0112\001\002\000\004" +
    "\041\u010f\001\002\000\004\015\u0110\001\002\000\004\022" +
    "\u0111\001\002\000\006\026\uffd1\043\uffd1\001\002\000\004" +
    "\015\u0113\001\002\000\004\022\u0114\001\002\000\006\026" +
    "\uffd4\043\uffd4\001\002\000\004\015\u0116\001\002\000\004" +
    "\022\u0117\001\002\000\006\026\uffd7\043\uffd7\001\002\000" +
    "\004\022\u0119\001\002\000\006\026\uffdb\043\uffdb\001\002" +
    "\000\004\022\u011b\001\002\000\006\026\uffda\043\uffda\001" +
    "\002\000\004\030\231\001\002\000\004\030\231\001\002" +
    "\000\004\030\231\001\002\000\004\030\231\001\002\000" +
    "\004\030\231\001\002\000\004\017\240\001\002\000\004" +
    "\002\uffff\001\002\000\004\023\u0124\001\002\000\004\015" +
    "\u0125\001\002\000\004\016\u0126\001\002\000\004\030\uffe8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\010\002\007\003\005\024\004\001\001\000" +
    "\002\001\001\000\004\026\u011b\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\054\015\052\017\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\170\001\001" +
    "\000\004\011\156\001\001\000\002\001\001\000\004\011" +
    "\055\001\001\000\004\011\056\001\001\000\006\006\057" +
    "\011\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\062\001\001\000\006\006\063\011\064\001\001" +
    "\000\002\001\001\000\004\011\065\001\001\000\004\011" +
    "\066\001\001\000\004\011\067\001\001\000\004\011\070" +
    "\001\001\000\004\011\071\001\001\000\004\011\072\001" +
    "\001\000\004\011\073\001\001\000\004\011\074\001\001" +
    "\000\004\011\075\001\001\000\004\011\076\001\001\000" +
    "\004\011\077\001\001\000\004\011\100\001\001\000\004" +
    "\011\101\001\001\000\004\011\102\001\001\000\004\011" +
    "\103\001\001\000\004\006\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\157\001\001\000\004\011\160\001\001\000\004\011\161" +
    "\001\001\000\004\011\162\001\001\000\004\011\163\001" +
    "\001\000\004\011\164\001\001\000\004\006\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\171\001\001\000\010\011\054\015\052\017\172" +
    "\001\001\000\004\020\173\001\001\000\004\016\174\001" +
    "\001\000\010\011\054\015\052\017\175\001\001\000\004" +
    "\020\176\001\001\000\004\016\177\001\001\000\010\011" +
    "\054\015\052\017\200\001\001\000\004\020\201\001\001" +
    "\000\004\016\202\001\001\000\010\011\054\015\052\017" +
    "\203\001\001\000\004\020\204\001\001\000\004\016\205" +
    "\001\001\000\010\011\054\015\052\017\206\001\001\000" +
    "\004\020\207\001\001\000\004\014\210\001\001\000\004" +
    "\021\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\225\023\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\305\001\001\000\004\024" +
    "\227\001\001\000\004\026\231\001\001\000\002\001\001" +
    "\000\004\026\232\001\001\000\004\026\233\001\001\000" +
    "\004\026\234\001\001\000\004\026\235\001\001\000\004" +
    "\026\236\001\001\000\004\025\240\001\001\000\002\001" +
    "\001\000\004\022\242\001\001\000\002\001\001\000\004" +
    "\027\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\261\001\001\000\004\007" +
    "\263\001\001\000\002\001\001\000\004\006\264\001\001" +
    "\000\004\007\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\306\001\001\000\004" +
    "\006\307\001\001\000\004\006\310\001\001\000\004\006" +
    "\311\001\001\000\004\006\312\001\001\000\004\007\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u011c\001\001\000\004\026\u011d\001\001\000\004\026\u011e" +
    "\001\001\000\004\026\u011f\001\001\000\004\026\u0120\001" +
    "\001\000\004\025\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // END ::= Identificador Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("END",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MENSAJE ::= Identificador Identificador Identificador Identificador Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MENSAJE ::= Identificador Identificador Identificador Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MENSAJE ::= Identificador Identificador Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MENSAJE ::= Identificador Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MENSAJE ::= Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MENSAJE ::= Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MENSAJE ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MENSAJE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENTRADA ::= Leer Entrada Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SALIDA ::= Escribir Salida Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SALIDA ::= Escribir Salida Identificador Salida Linea P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SALIDA ::= Escribir Salida Comillas MENSAJE D_puntos Comillas Salida Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SALIDA ::= Escribir Salida Comillas MENSAJE D_puntos Comillas Salida Identificador Salida Linea Salida Linea P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SALIDA ::= Escribir Salida Comillas MENSAJE D_puntos Comillas Salida Identificador Salida Linea P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SALIDA ::= Escribir Salida Comillas MENSAJE Comillas Salida Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SALIDA ::= Escribir Salida Comillas MENSAJE Comillas Salida Linea P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SALIDA ::= Escribir Salida Comillas MENSAJE D_puntos Comillas Salida Linea P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SALIDA ::= Escribir Salida Comillas MENSAJE D_puntos Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SALIDA ::= Escribir Salida Comillas MENSAJE Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador DX Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador CX Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador BX AX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador CX AX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador AX CX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador AX AX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador CX CX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador DX AX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador D_puntos Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador CX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Identificador DX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Identificador CX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador AX Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Identificador BX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENSAMBLADOR ::= Asm Parentesis_a Comillas Identificador Identificador AX Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENSAMBLADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLES ::= T_datos Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES ::= T_datos Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= T_datos Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIABLES ::= T_datos Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // D_SWITCH ::= Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SWITCH",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASE ::= Estructuras_control Numero D_puntos SALIDA ENTRADA Identificador Parentesis_a Parentesis_c P_coma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASE ::= Estructuras_control Numero D_puntos SALIDA ENTRADA SALIDA ENTRADA Identificador Parentesis_a Parentesis_c P_coma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // A_SWITCH ::= Estructuras_control Parentesis_a Identificador Parentesis_c Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // C_DOWHILE ::= Llave_c Estructuras_iteracion Parentesis_a Identificador Diferente Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_DOWHILE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SALIDA SALIDA SALIDA SALIDA SALIDA SALIDA SALIDA ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // A_DOWHILE ::= Estructuras_iteracion Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_DOWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MAIN ::= T_datos Main Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GLOBALES ::= T_datos Identificador Identificador Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBALES ::= T_datos Identificador Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GLOBALES ::= T_datos Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GLOBALES ::= T_datos Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GLOBALES ::= T_datos Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GLOBALES ::= T_datos Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECREMENTAR ::= Identificador Resta Resta P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECREMENTAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C_FUNCION ::= Identificador Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C_FUNCION ::= Identificador Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C_FUNCION ::= Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-21)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= DECREMENTAR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= ENSAMBLADOR ENSAMBLADOR ENSAMBLADOR SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A_FUNCION ::= T_datos Identificador Parentesis_a T_datos Identificador T_datos Identificador Parentesis_c Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A_FUNCION ::= T_datos Identificador Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIA ::= Librerias Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= A_SWITCH CASE CASE CASE CASE CASE CASE D_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LIBRERIA GLOBALES A_FUNCION FUNCION C_FUNCION A_FUNCION FUNCION C_FUNCION A_FUNCION FUNCION C_FUNCION A_FUNCION FUNCION C_FUNCION A_FUNCION FUNCION C_FUNCION A_FUNCION FUNCION C_FUNCION MAIN A_DOWHILE SENTENCIA A_SWITCH CASE CASE CASE CASE CASE CASE D_SWITCH C_DOWHILE END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-32)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

