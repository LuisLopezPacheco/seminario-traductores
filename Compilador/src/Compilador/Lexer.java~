/* The following code was generated by JFlex 1.4.3 on 4/11/21 08:00 PM */

package Compilador;
import static Compilador.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/21 08:00 PM from the specification file
 * <tt>C:/Users/david/OneDrive/Escritorio/UDG/6to Semestre/Traductores II/Compilador/src/Compilador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\34\1\31\1\53"+
    "\1\0\1\43\2\0\1\44\1\45\1\37\1\35\1\3\1\36\1\40"+
    "\1\4\12\2\1\32\1\52\1\41\1\33\1\42\2\0\32\1\1\50"+
    "\1\0\1\51\1\0\1\1\1\0\1\16\1\22\1\13\1\10\1\6"+
    "\1\17\1\26\1\23\1\12\2\1\1\11\1\15\1\7\1\14\1\30"+
    "\1\1\1\24\1\25\1\20\1\21\1\1\1\27\1\54\2\1\1\46"+
    "\1\0\1\47\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\14\2"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\2\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\1\1\4\3\2\1\26\2\2\1\27\13\2"+
    "\1\27\4\2\1\30\1\31\1\32\3\0\1\33\11\2"+
    "\1\34\1\35\6\2\1\36\1\2\1\33\1\26\6\2"+
    "\6\0\1\6\6\2\1\37\3\2\1\40\5\2\1\41"+
    "\1\42\1\43\1\44\1\3\1\0\12\2\1\0\4\2"+
    "\1\0\2\2\13\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\55\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\55\0\u032a\0\55\0\u0357\0\55"+
    "\0\55\0\55\0\55\0\u0384\0\u03b1\0\u03de\0\u040b\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\u0438\0\u0465\0\u0492"+
    "\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\132\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\55\0\55"+
    "\0\55\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\132\0\132"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\132\0\u0bc7"+
    "\0\132\0\132\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\132\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\132\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\132\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\55"+
    "\0\55\0\55\0\55\0\55\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u1572\0\u159f\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\3\3\1\20\1\3\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\3\56\0\2\3\3\0\23\3\23\0"+
    "\1\3\2\0\1\4\55\0\1\5\55\0\1\47\51\0"+
    "\2\3\3\0\1\3\1\50\1\3\1\51\13\3\1\52"+
    "\3\3\23\0\1\3\1\0\2\3\3\0\6\3\1\53"+
    "\14\3\23\0\1\3\1\0\2\3\3\0\1\54\22\3"+
    "\23\0\1\3\1\0\2\3\3\0\1\3\1\55\7\3"+
    "\1\56\11\3\23\0\1\3\1\0\2\3\3\0\4\3"+
    "\1\57\1\3\1\60\1\3\1\61\4\3\1\62\5\3"+
    "\23\0\1\3\1\0\2\3\3\0\4\3\1\63\3\3"+
    "\1\64\12\3\23\0\1\3\1\0\2\3\3\0\17\3"+
    "\1\65\3\3\23\0\1\3\1\0\2\3\3\0\3\3"+
    "\1\66\1\67\1\3\1\70\14\3\23\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\71\12\3\23\0\1\3\1\0"+
    "\2\3\3\0\4\3\1\72\5\3\1\73\6\3\1\74"+
    "\1\3\23\0\1\3\1\0\2\3\3\0\15\3\1\75"+
    "\5\3\23\0\1\3\1\0\2\3\3\0\10\3\1\76"+
    "\12\3\23\0\1\3\33\0\1\26\54\0\1\77\62\0"+
    "\1\100\55\0\1\101\20\0\1\102\104\0\1\103\30\0"+
    "\1\104\42\0\5\47\1\0\47\47\1\0\2\3\3\0"+
    "\2\3\1\105\2\3\1\106\4\3\1\107\10\3\23\0"+
    "\1\3\1\0\2\3\3\0\1\110\16\3\1\111\3\3"+
    "\23\0\1\3\1\0\2\3\3\0\5\3\1\112\15\3"+
    "\23\0\1\3\1\0\2\3\3\0\13\3\1\113\1\114"+
    "\6\3\23\0\1\3\1\0\2\3\3\0\1\115\22\3"+
    "\23\0\1\3\1\0\2\3\3\0\4\3\1\116\5\3"+
    "\1\117\10\3\23\0\1\3\1\0\2\3\3\0\1\3"+
    "\1\120\21\3\23\0\1\3\1\0\2\3\3\0\13\3"+
    "\1\121\7\3\23\0\1\3\1\0\2\3\3\0\2\3"+
    "\1\122\13\3\1\123\1\111\3\3\23\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\124\12\3\23\0\1\3\1\0"+
    "\2\3\3\0\1\125\22\3\23\0\1\3\1\0\2\3"+
    "\3\0\4\3\1\126\16\3\23\0\1\3\1\0\2\3"+
    "\3\0\7\3\1\127\13\3\23\0\1\3\1\0\2\3"+
    "\3\0\6\3\1\130\14\3\23\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\131\21\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\132\4\3\23\0\1\3\1\0\2\3"+
    "\3\0\5\3\1\133\15\3\23\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\134\21\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\135\4\3\23\0\1\3\1\0\2\3"+
    "\3\0\4\3\1\136\16\3\23\0\1\3\1\0\2\3"+
    "\3\0\4\3\1\137\16\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\140\4\3\23\0\1\3\10\0\1\141"+
    "\2\0\1\142\2\0\1\143\3\0\1\144\34\0\1\145"+
    "\61\0\1\146\46\0\2\3\3\0\3\3\1\147\17\3"+
    "\23\0\1\3\1\0\2\3\3\0\10\3\1\150\12\3"+
    "\23\0\1\3\1\0\2\3\3\0\1\151\22\3\23\0"+
    "\1\3\1\0\2\3\3\0\20\3\1\152\2\3\23\0"+
    "\1\3\1\0\2\3\3\0\1\56\22\3\23\0\1\3"+
    "\1\0\2\3\3\0\16\3\1\153\4\3\23\0\1\3"+
    "\1\0\2\3\3\0\14\3\1\114\6\3\23\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\154\17\3\23\0\1\3"+
    "\1\0\2\3\3\0\16\3\1\120\4\3\23\0\1\3"+
    "\1\0\2\3\3\0\5\3\1\155\15\3\23\0\1\3"+
    "\1\0\2\3\3\0\12\3\1\156\10\3\23\0\1\3"+
    "\1\0\2\3\3\0\1\157\22\3\23\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\160\12\3\23\0\1\3\1\0"+
    "\2\3\3\0\16\3\1\117\4\3\23\0\1\3\1\0"+
    "\2\3\3\0\1\3\1\161\21\3\23\0\1\3\1\0"+
    "\2\3\3\0\1\3\1\162\21\3\23\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\163\1\3\1\164\10\3\23\0"+
    "\1\3\1\0\2\3\3\0\1\70\22\3\23\0\1\3"+
    "\1\0\2\3\3\0\6\3\1\56\14\3\23\0\1\3"+
    "\1\0\2\3\3\0\4\3\1\165\16\3\23\0\1\3"+
    "\1\0\2\3\3\0\12\3\1\166\10\3\23\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\167\17\3\23\0\1\3"+
    "\1\0\2\3\3\0\10\3\1\132\12\3\23\0\1\3"+
    "\54\0\1\170\54\0\1\171\54\0\1\172\54\0\1\173"+
    "\2\0\1\145\42\0\1\174\22\0\1\175\42\0\2\3"+
    "\3\0\17\3\1\134\3\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\176\4\3\23\0\1\3\1\0\2\3"+
    "\3\0\4\3\1\177\16\3\23\0\1\3\1\0\2\3"+
    "\3\0\4\3\1\200\16\3\23\0\1\3\1\0\2\3"+
    "\3\0\1\117\22\3\23\0\1\3\1\0\2\3\3\0"+
    "\4\3\1\201\16\3\23\0\1\3\1\0\2\3\3\0"+
    "\1\3\1\202\21\3\23\0\1\3\1\0\2\3\3\0"+
    "\5\3\1\203\15\3\23\0\1\3\1\0\2\3\3\0"+
    "\12\3\1\204\10\3\23\0\1\3\1\0\2\3\3\0"+
    "\12\3\1\117\10\3\23\0\1\3\1\0\2\3\3\0"+
    "\10\3\1\205\12\3\23\0\1\3\1\0\2\3\3\0"+
    "\1\3\1\206\21\3\23\0\1\3\1\0\2\3\3\0"+
    "\5\3\1\207\15\3\23\0\1\3\1\0\2\3\3\0"+
    "\1\132\22\3\23\0\1\3\11\0\1\210\44\0\2\3"+
    "\3\0\6\3\1\117\14\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\56\4\3\23\0\1\3\1\0\2\3"+
    "\3\0\14\3\1\211\6\3\23\0\1\3\1\0\2\3"+
    "\3\0\6\3\1\162\14\3\23\0\1\3\1\0\2\3"+
    "\3\0\10\3\1\117\12\3\23\0\1\3\1\0\2\3"+
    "\3\0\12\3\1\212\10\3\23\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\213\4\3\23\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\214\21\3\23\0\1\3\1\0\2\3"+
    "\3\0\20\3\1\117\2\3\23\0\1\3\1\0\2\3"+
    "\3\0\15\3\1\56\5\3\23\0\1\3\21\0\1\215"+
    "\34\0\2\3\3\0\4\3\1\216\16\3\23\0\1\3"+
    "\1\0\2\3\3\0\1\124\22\3\23\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\217\12\3\23\0\1\3\1\0"+
    "\2\3\3\0\12\3\1\154\10\3\23\0\1\3\10\0"+
    "\1\220\45\0\2\3\3\0\16\3\1\156\4\3\23\0"+
    "\1\3\1\0\2\3\3\0\17\3\1\132\3\3\23\0"+
    "\1\3\6\0\1\221\107\0\1\222\25\0\1\223\56\0"+
    "\1\224\65\0\1\225\47\0\1\226\60\0\1\227\36\0"+
    "\1\230\64\0\1\231\53\0\1\232\101\0\1\233\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\14\1\1\11\1\1\1\11"+
    "\1\1\4\11\4\1\6\11\31\1\3\11\3\0\34\1"+
    "\6\0\21\1\5\11\1\0\12\1\1\0\4\1\1\0"+
    "\2\1\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 38: break;
        case 21: 
          { lexeme=yytext(); return P_coma;
          }
        case 39: break;
        case 24: 
          { lexeme=yytext(); return Diferente;
          }
        case 40: break;
        case 17: 
          { lexeme=yytext(); return Llave_a;
          }
        case 41: break;
        case 33: 
          { lexeme=yytext(); return DX;
          }
        case 42: break;
        case 23: 
          { lexeme=yytext(); return Estructuras_control;
          }
        case 43: break;
        case 20: 
          { lexeme=yytext(); return Corchete_c;
          }
        case 44: break;
        case 25: 
          { lexeme=yytext(); return Salida;
          }
        case 45: break;
        case 34: 
          { lexeme=yytext(); return CX;
          }
        case 46: break;
        case 6: 
          { return Linea;
          }
        case 47: break;
        case 26: 
          { lexeme=yytext(); return Entrada;
          }
        case 48: break;
        case 36: 
          { lexeme=yytext(); return BX;
          }
        case 49: break;
        case 5: 
          { lexeme=yytext(); return Division;
          }
        case 50: break;
        case 30: 
          { lexeme=yytext(); return Asm;
          }
        case 51: break;
        case 28: 
          { lexeme=yytext(); return T_datos;
          }
        case 52: break;
        case 22: 
          { lexeme=yytext(); return Estructuras_iteracion;
          }
        case 53: break;
        case 31: 
          { lexeme=yytext(); return Escribir;
          }
        case 54: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 55: break;
        case 18: 
          { lexeme=yytext(); return Llave_c;
          }
        case 56: break;
        case 35: 
          { lexeme=yytext(); return AX;
          }
        case 57: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 58: break;
        case 7: 
          { lexeme=yytext(); return Comillas;
          }
        case 59: break;
        case 27: 
          { lexeme=yytext(); return End;
          }
        case 60: break;
        case 13: 
          { lexeme=yytext(); return Punto;
          }
        case 61: break;
        case 32: 
          { lexeme=yytext(); return Main;
          }
        case 62: break;
        case 11: 
          { lexeme=yytext(); return Resta;
          }
        case 63: break;
        case 14: 
          { lexeme=yytext(); return Mod;
          }
        case 64: break;
        case 29: 
          { lexeme=yytext(); return Leer;
          }
        case 65: break;
        case 37: 
          { lexeme=yytext(); return Librerias;
          }
        case 66: break;
        case 19: 
          { lexeme=yytext(); return Corchete_a;
          }
        case 67: break;
        case 16: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 68: break;
        case 12: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 69: break;
        case 1: 
          { return ERROR;
          }
        case 70: break;
        case 9: 
          { lexeme=yytext(); return Igual;
          }
        case 71: break;
        case 4: 
          { /*Ignore*/
          }
        case 72: break;
        case 8: 
          { lexeme=yytext(); return D_puntos;
          }
        case 73: break;
        case 10: 
          { lexeme=yytext(); return Suma;
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
